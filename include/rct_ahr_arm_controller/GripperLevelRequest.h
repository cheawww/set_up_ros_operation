// Generated by gencpp from file rct_ahr_arm_controller/GripperLevelRequest.msg
// DO NOT EDIT!


#ifndef RCT_AHR_ARM_CONTROLLER_MESSAGE_GRIPPERLEVELREQUEST_H
#define RCT_AHR_ARM_CONTROLLER_MESSAGE_GRIPPERLEVELREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rct_ahr_arm_controller
{
template <class ContainerAllocator>
struct GripperLevelRequest_
{
  typedef GripperLevelRequest_<ContainerAllocator> Type;

  GripperLevelRequest_()
    : level(0)  {
    }
  GripperLevelRequest_(const ContainerAllocator& _alloc)
    : level(0)  {
  (void)_alloc;
    }



   typedef int8_t _level_type;
  _level_type level;





  typedef boost::shared_ptr< ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GripperLevelRequest_

typedef ::rct_ahr_arm_controller::GripperLevelRequest_<std::allocator<void> > GripperLevelRequest;

typedef boost::shared_ptr< ::rct_ahr_arm_controller::GripperLevelRequest > GripperLevelRequestPtr;
typedef boost::shared_ptr< ::rct_ahr_arm_controller::GripperLevelRequest const> GripperLevelRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator1> & lhs, const ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator2> & rhs)
{
  return lhs.level == rhs.level;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator1> & lhs, const ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rct_ahr_arm_controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ecb6b6da01cd8c542143b24978f9b80f";
  }

  static const char* value(const ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xecb6b6da01cd8c54ULL;
  static const uint64_t static_value2 = 0x2143b24978f9b80fULL;
};

template<class ContainerAllocator>
struct DataType< ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rct_ahr_arm_controller/GripperLevelRequest";
  }

  static const char* value(const ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 level\n"
;
  }

  static const char* value(const ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.level);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperLevelRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rct_ahr_arm_controller::GripperLevelRequest_<ContainerAllocator>& v)
  {
    s << indent << "level: ";
    Printer<int8_t>::stream(s, indent + "  ", v.level);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RCT_AHR_ARM_CONTROLLER_MESSAGE_GRIPPERLEVELREQUEST_H
