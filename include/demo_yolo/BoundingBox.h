// Generated by gencpp from file demo_yolo/BoundingBox.msg
// DO NOT EDIT!


#ifndef DEMO_YOLO_MESSAGE_BOUNDINGBOX_H
#define DEMO_YOLO_MESSAGE_BOUNDINGBOX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace demo_yolo
{
template <class ContainerAllocator>
struct BoundingBox_
{
  typedef BoundingBox_<ContainerAllocator> Type;

  BoundingBox_()
    : class_name()
    , x(0)
    , y(0)
    , w(0)
    , h(0)  {
    }
  BoundingBox_(const ContainerAllocator& _alloc)
    : class_name(_alloc)
    , x(0)
    , y(0)
    , w(0)
    , h(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _class_name_type;
  _class_name_type class_name;

   typedef int32_t _x_type;
  _x_type x;

   typedef int32_t _y_type;
  _y_type y;

   typedef int32_t _w_type;
  _w_type w;

   typedef int32_t _h_type;
  _h_type h;





  typedef boost::shared_ptr< ::demo_yolo::BoundingBox_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::demo_yolo::BoundingBox_<ContainerAllocator> const> ConstPtr;

}; // struct BoundingBox_

typedef ::demo_yolo::BoundingBox_<std::allocator<void> > BoundingBox;

typedef boost::shared_ptr< ::demo_yolo::BoundingBox > BoundingBoxPtr;
typedef boost::shared_ptr< ::demo_yolo::BoundingBox const> BoundingBoxConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::demo_yolo::BoundingBox_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::demo_yolo::BoundingBox_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::demo_yolo::BoundingBox_<ContainerAllocator1> & lhs, const ::demo_yolo::BoundingBox_<ContainerAllocator2> & rhs)
{
  return lhs.class_name == rhs.class_name &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.w == rhs.w &&
    lhs.h == rhs.h;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::demo_yolo::BoundingBox_<ContainerAllocator1> & lhs, const ::demo_yolo::BoundingBox_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace demo_yolo

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::demo_yolo::BoundingBox_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::demo_yolo::BoundingBox_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::demo_yolo::BoundingBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::demo_yolo::BoundingBox_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo_yolo::BoundingBox_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::demo_yolo::BoundingBox_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::demo_yolo::BoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3af29335911962d17853e4aa1619e898";
  }

  static const char* value(const ::demo_yolo::BoundingBox_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3af29335911962d1ULL;
  static const uint64_t static_value2 = 0x7853e4aa1619e898ULL;
};

template<class ContainerAllocator>
struct DataType< ::demo_yolo::BoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "demo_yolo/BoundingBox";
  }

  static const char* value(const ::demo_yolo::BoundingBox_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::demo_yolo::BoundingBox_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string class_name\n"
"int32 x\n"
"int32 y\n"
"int32 w\n"
"int32 h\n"
"\n"
;
  }

  static const char* value(const ::demo_yolo::BoundingBox_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::demo_yolo::BoundingBox_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.class_name);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.w);
      stream.next(m.h);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoundingBox_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::demo_yolo::BoundingBox_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::demo_yolo::BoundingBox_<ContainerAllocator>& v)
  {
    s << indent << "class_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.class_name);
    s << indent << "x: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y);
    s << indent << "w: ";
    Printer<int32_t>::stream(s, indent + "  ", v.w);
    s << indent << "h: ";
    Printer<int32_t>::stream(s, indent + "  ", v.h);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEMO_YOLO_MESSAGE_BOUNDINGBOX_H
